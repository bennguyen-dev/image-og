generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  apiKey        String?         @unique @default(cuid()) @db.VarChar(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sites   Site[]
  balance UserBalance?
  logs    UserLog[]

  @@index([email])
  @@index([apiKey])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Site {
  id                String @id @default(cuid())
  domain            String
  userId            String
  cacheDurationDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages Page[]

  @@unique([userId, domain])
}

model Page {
  id             String    @id @default(cuid())
  url            String
  siteId         String
  OGTitle        String?
  OGDescription  String?
  imageSrc       String?
  imageExpiresAt DateTime?

  cacheDurationDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, url])
}

model Demo {
  id                String @id @default(cuid())
  domain            String
  cacheDurationDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  demoPages DemoPage[]

  @@unique([domain])
}

model DemoPage {
  id            String  @id @default(cuid())
  demoId        String
  url           String
  OGImage       String?
  OGTitle       String?
  OGDescription String?
  SnapOGImage   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  demo Demo @relation(fields: [demoId], references: [id], onDelete: Cascade)

  @@unique([demoId, url])
}

model UserBalance {
  id          String @id @default(cuid())
  userId      String @unique
  paidCredits Int
  freeCredits Int    @default(30)
  usedCredits Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum LOG_STATUS {
  SUCCESS
  ERROR
}

enum LOG_TYPE {
  // Credit additions
  FREE_CREDITS
  PURCHASE_CREDITS

  // Credit deductions
  PAGE_CREATION
  PAGE_MANUAL_REFRESH
}

model UserLog {
  id        String     @id @default(cuid())
  userId    String
  amount    Int
  type      LOG_TYPE
  status    LOG_STATUS @default(SUCCESS)
  metadata  Json?
  createdAt DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  isRecurring Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  polarId         String    @unique
  polarCreatedAt  DateTime
  polarModifiedAt DateTime?
  lastSyncedAt    DateTime  @default(now())

  priceAmount   Int
  priceCurrency String
  priceType     String

  creditsAmount Int
  isPopular     Boolean?

  benefits Json[]
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
  checkoutId      String?
  checkoutStatus  String?

  @@index([checkoutId])
}
