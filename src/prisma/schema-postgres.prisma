generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  apiKey        String?         @unique @default(cuid()) @db.VarChar(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sites         Site[]
  subscriptions Subscription[]
  userUsages    UserUsage[]

  @@index([email])
  @@index([apiKey])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Site {
  id                String @id @default(cuid())
  domain            String
  userId            String
  cacheDurationDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  pages Page[]

  @@unique([userId, domain])
}

model Page {
  id             String    @id @default(cuid())
  url            String
  siteId         String
  OGTitle        String?
  OGDescription  String?
  imageSrc       String?
  imageExpiresAt DateTime?

  cacheDurationDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site Site @relation(fields: [siteId], references: [id])

  @@unique([siteId, url])
}

// New Demo Model
model Demo {
  id                String @id @default(cuid())
  domain            String
  cacheDurationDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  demoPages DemoPage[]

  @@unique([domain])
}

model DemoPage {
  id            String  @id @default(cuid())
  demoId        String
  url           String
  OGImage       String?
  OGTitle       String?
  OGDescription String?
  SnapOGImage   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  demo Demo @relation(fields: [demoId], references: [id])

  @@unique([demoId, url])
}

// lemonSqueezy
model Plan {
  id                 String   @id @default(cuid())
  productId          Int
  productName        String?
  variantId          Int      @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean  @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  packageSize        Int?
  isPopular          Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id                 String  @id @default(cuid())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int?
  userId             String
  planId             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  plan       Plan        @relation(fields: [planId], references: [id])
  userUsages UserUsage[]
}

model UserUsage {
  id             String    @id @default(cuid())
  userId         String
  subscriptionId String?
  periodStart    DateTime?
  periodEnd      DateTime?
  count          Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
}

model WebhookEvent {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
}
